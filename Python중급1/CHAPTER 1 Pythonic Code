
                       CHAPTER 1 Pythonic Code

	- Split & Join

	- List Comprehension

	- Enumerate & Zip

	- Lambda & MapReduce

	- Asterisk

	<참고> Data Structure - Collections

	- 선형대수(Linear Algebra)

	- Linear algebra codes

	- Case Study - News Categorization

Split & Join

Split 함수
- String Type의 값을 나눠서 List 형태로 변환
>>> items = 'zero one two three'.split() # 빈칸을 기준으로 문자열 나누기
>>> print (items) ['zero', 'one', 'two', 'three']
>>> example = 'python,jquery,javascript' # ","을 기준으로 문자열 나누기
>>> example.split(",") ['python', 'jquery', 'javascript']
>>> a, b, c = example.split(",") # 리스트에 있는 각 값을 a,b,c 변수로 unpacking
>>> example = 'cs50.gachon.edu'
>>> subdomain, domain, tld = example.split('.')
# "."을 기준으로 문자열 나누기 → Unpacking

Join 함수
- String List를 합쳐 하나의 String으로 반환할 때사용
>>> colors = ['red', 'blue', 'green', 'yellow']
>>> result = ''.join(colors)
>>> result 'redbluegreenyellow'
>>> result = ' '.join(colors) # 연결 시 빈칸 1칸으로 연결
>>> result 'red blue green yellow'
>>> result = ', '.join(colors) # 연결 시 ", "으로 연결
>>> result 'red, blue, green, yellow'
>>> result = '-'.join(colors) # 연결 시 "-"으로 연결
>>> result 'red-blue-green-yellow'


List comprehensions
- 기존 List 사용하여 간단히 다른 List를 만드는 기법
- 포괄적인 List, 포함되는 리스트라는 의미로 사용됨
- 파이썬에서 가장 많이 사용되는 기법 중 하나
- 일반적으로 for + append 보다 속도가 빠름

>>> result = []
>>> for i in range(10):
     ... result.append(i)
>>> result
 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

>>> result = [i for i in range(10)]
>>> result
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> result = [i for i in range(10) if i % 2 == 0]
>>> result
[0, 2, 4, 6, 8]

>>> word_1 = "Hello"
>>> word_2 = "World"
>>> result = [i+j for i in word_1 for j in word_2] # Nested For loop
>>> result
['HW', 'Ho', 'Hr', 'Hl', 'Hd', 'eW', 'eo', 'er', 'el', 'ed', 'lW', 'lo', 'lr', 'll', 'ld', 'lW', 'lo', 'lr', 'll', 'ld', 'oW', 'oo', 'or', 'ol', 'od']

>>> case_1 = ["A","B","C"]
>>> case_2 = ["D","E","A"]
>>> result = [i+j for i in case_1 for j in case_2]
>>> result
['AD', 'AE', 'AA', 'BD', 'BE', 'BA', 'CD', 'CE', 'CA']
>>> result = [i+j for i in case_1 for j in case_2 if not(i==j)]
# Filter: i랑 j과 같다면 List에 추가하지 않음
>>> result
['AD', 'AE', 'BD', 'BE', 'BA', 'CD', 'CE', 'CA']
>>> result.sort()
>>> result
['AD', 'AE', 'BA', 'BD', 'BE', 'CA', 'CD', 'CE']
>>> words = 'The quick brown fox jumps over the lazy dog'.split()
# 문장을 빈칸 기준으로 나눠 list로 변환
>>> print (words)
['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']
>>>
>>> stuff = [[w.upper(), w.lower(), len(w)] for w in words]
# list의 각 elemente들을 대문자, 소문자, 길이 로 변환하여 two dimensional list로 변환
>>> for i in stuff:
     ... print (i)

['THE', 'the', 3]
['QUICK', 'quick', 5]
['BROWN', 'brown', 5]
['FOX', 'fox', 3]
['JUMPS', 'jumps', 5]
['OVER', 'over', 4]
['THE', 'the', 3]
['LAZY', 'lazy', 4]
['DOG', 'dog', 3]

Enumerate
- List의 element를 추출할 때 번호를 붙여서 추출
>>> for i, v in enumerate(['tic', 'tac', 'toe']): # list의 있는 index와 값을 unpacking
      ... print (i, v)
0 tic
1 tac
2 toe

>>> mylist = ["a","b","c","d"]
>>> list(enumerate(mylist)) # list의 있는 index와 값을 unpacking하여 list로 저장
[(0, 'a'), (1, 'b'), (2, 'c'), (3, 'd')]
>>> {i:j for i,j in enumerate('Gachon University is an academic institute
located in South Korea.'.split())}
# 문장을 list로 만들고 list의 index와 값을 unpacking하여 dict로 저장
{0: 'Gachon', 1: 'University', 2: 'is', 3: 'an', 4: 'academic', 5: 'institute', 6: 'located', 7: 'in', 8: 'South', 9: 'Korea.'}

Zip
두 개의 list의 값을 병렬적으로 추출함
>>> alist = ['a1', 'a2', 'a3']
>>> blist = ['b1', 'b2', 'b3']
>>> for a, b in zip(alist, blist): # 병렬적으로 값을 추출
       ... print (a,b)
a1 b1
a2 b2
a3 b3

>>> a,b,c =zip((1,2,3),(10,20,30),(100,200,300)) #각 tuple의 같은 index 끼리 묶음 (1, 10, 100) (2, 20, 200) (3, 30, 300)
>>> [sum(x) for x in zip((1,2,3), (10,20,30), (100,200,300))] # 각 Tuple 같은 index를 묶어 합을 list로 변환
[111, 222, 333]

Enumerate & Zip
>>> alist = ['a1', 'a2', 'a3']
>>> blist = ['b1', 'b2', 'b3']
>>> for i, (a, b) in enumerate(zip(alist, blist)):
     ... print (i, a, b) # index alist[index] blist[index] 표시
     ...
0 a1 b1
1 a2 b2
2 a3 b3

Lambda
- 함수 이름 없이, 함수처럼 쓸 수 있는 익명함수
- 수학의 람다 대수에서 유래함

[General function]
def f(x, y):
    return x + y

print(f(1, 4))

[Lambda function]
f = lambda x, y: x + y
print(f(1, 4))

f = lambda x, y: x + y
print(f(1, 4))

f = lambda x: x ** 2
print(f(3))

f = lambda x: x / 2
print(f(3))

print((lambda x: x +1)(5))

Map function
- Sequence 자료형 각 element에 동일한 function을 적용함

>>> ex = [1,2,3,4,5]
>>> f = lambda x: x ** 2
>>> print(list(map(f, ex)))
[1, 4, 9, 16, 25]
>>> f = lambda x, y: x + y
>>> print(list(map(f, ex, ex)))
[2, 4, 6, 8, 10]
>>> list( map( lambda x: x ** 2 if x % 2 == 0 else x, ex) )
[1, 4, 3, 16, 5]

Reduce function
- map function과 달리 list에 똑같은 함수를 적용해서 통합

>>> from functools import reduce
>>> print(reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]))
15

>>> def factorial(n):
	 return reduce(lambda x,y:x*y, range(1,n+1))
>>> factorial(5)
120

[Summary]
- Lambda, map, reduce는 간단한 코드로 다양한 기능을 제공
- 그러나 코드의 직관성이 떨어져서 lambda나 reduce는 python3에서 사용을
  권장하지 않음
- Legacy library나 다양한 머신러닝 코드에서 여전히 사용 중

Asterisk
- 흔히 알고 있는 * 를 의미함
- 단순 곱셈, 제곱연산, 가변 인자 활용 등 다양하게 사용됨

>>> def asterisk_test(a, *args):
         print(a, args)
         print(type(args))

>>> asterisk_test(1,2,3,4,5,6)
1 (2, 3, 4, 5, 6)
<class 'tuple'>

>>> def asterisk_test(a, **kargs):
        print(a, kargs)
        print(type(kargs))

>>> asterisk_test(1, b=2, c=3, d=4, e=5, f=6)
1 {'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}
<class 'dict'>

Asterisk
- unpacking a container - tuple, dict 등 자료형에 들어가 있는 값을 unpacking
- 함수의 입력값, zip 등에 유용하게 사용가능

>>> def asterisk_test(a, *args):
        print(a, args)
        print(type(args))

>>> asterisk_test(1, *(2,3,4,5,6))
1 (2, 3, 4, 5, 6)
<class 'tuple'>
>>> asterisk_test(1, (2,3,4,5,6))
1 ((2, 3, 4, 5, 6),)
<class 'tuple'>
>>>
>>> def asterisk_test(a, args):
        print(a, *args)
        print(type(args))

>>> asterisk_test(1, (2,3,4,5,6))
1 2 3 4 5 6
<class 'tuple'>

Asterisk – unpacking a container
>>> a, b, c = ([1, 2], [3, 4], [5, 6])
>>> print(a, b, c)
[1, 2] [3, 4] [5, 6]

>>> data = ([1, 2], [3, 4], [5, 6])
>>> print(*data)
[1, 2] [3, 4] [5, 6]

>>> def asterisk_test(a, b, c, d,):
        print(a, b, c, d)

>>> data = {"b":1 , "c":2, "d":3}
>>> asterisk_test(10, **data)
10 1 2 3

>>> for data in zip(*([1, 2], [3, 4], [5, 6])):
	print(data)

(1, 3, 5)
(2, 4, 6)

- zip 을 사용하여 vector 계산하기

>>> u = [2, 2]
>>> v = [2, 3]
>>> z = [3, 5]
>>> result = [sum(t) for t in zip(u, v, z)]
>>> print (result)
[7, 10]

- Scalar-Vector product
>>> u = [1, 2, 3]
>>> v = [4, 4, 4]
>>> alpha = 2
>>> result = [alpha*sum(t) for t in zip(u, v)]
>>> print(result)
[10, 12, 14]
>>>

- Matrix addition
>>> matrix_a = [[3, 6], [4, 5]]
>>> matrix_b = [[5, 8], [6, 7]]
>>> result = [[sum(row) for row in zip(*t)]
                           for t in zip(matrix_a, matrix_b)]

>>> print(result)
[[8, 14], [10, 12]]
>>>

- Scalar-Matrix Product
>>> matrix_a = [[3, 6], [4, 5]]
>>> alpha = 4
>>> result = [[alpha * element for element in t] for t in matrix_a]
>>> print(result)
[[12, 24], [16, 20]]
>>>

- Matrix Transpose
>>> matrix_a = [[1, 2, 3], [4, 5, 6]]
>>> result = [[element for element in t] for t in zip(*matrix_a)]
>>> print(result)
[[1, 4], [2, 5], [3, 6]]
>>>

- Matrix Product
>>> matrix_a = [[1, 1, 2], [2, 1, 1]]
>>> matrix_b = [[1, 1], [2, 1], [1, 3]]
>>> result = [[sum(a * b for a, b in zip(row_a, column_b))
          for column_b in zip(*matrix_b)] for row_a in matrix_a]
>>>
>>> print(result)
[[5, 8], [5, 6]]
>>>

[ numpy Module ]
- 파이썬과학처리패키지
- Numerical Python
- 파이썬의 고성능 과학 계산용 패키지
- Matrix와 Vector와 같은 Array 연산의 사실상의 표준
- 한글로 넘파이로 주로 통칭, 넘피/늄파이라고 부르기도 함

>>> import numpy as np
- numpy의 호출 방법 - 일반적으로 numpy는 np라는 alias(별칭) 이용해서 호출함
- 특별한 이유는 없음 세계적인 약속 같은 것

>>> test_array=np.array([1,4,5,8], float)
>>> test_array
array([1., 4., 5., 8.])
>>> type(test_array[3])
<class 'numpy.float64'>
- numpy는 np.array 함수를 활용하여 배열을 생성함 -> ndarray
- numpy는 하나의 데이터 type만 배열에 넣을 수 있음
- List와 가장 큰 차이점, Dynamic typing not supported
- C의 Array를 사용하여 배열을 생성함

>>> test_array = np.array([1, 4, 5, "8"], float)
>>> test_array
array([1., 4., 5., 8.])
>>> print(type(test_array[3]))
<class 'numpy.float64'>
>>> print(test_array.dtype)
float64
>>> print(test_array.shape)
(4,)
- shape : numpy array의 object의 dimension 구성을 반환함
- dtype : numpy array의 데이터 type을 반환함

- Shape
- Array shape (vector)
- Array (vector, matrix, tensor)의 크기, 형태 등에 대한 정보

>>> vector = [1,2,3,4]
>>> np.array(vector, int).shape
(4,)
>>> matrix = [[1,2,5,8],[1,2,5,8],[1,2,5,8]]
>>> np.array(matrix, int).shape
(3, 4)
>>>

reshape
- Array의 shape의 크기를 변경함 (element의 갯수는 동일)
>>>import numpy as np
>>>test_matrix = [[1,2,3,4], [1,2,5,8]]
>>>np.array(test_matrix).shape
(2, 4)
>>>test =np.array(test_matrix).reshape(8,)
array([1, 2, 3, 4, 1, 2, 5, 8])

>>>np.array(test_matrix).reshape(2,2,2)
array([[[1, 2],
        [3, 4]],
       [[1, 2],
        [5, 8]]])

[Array의 size만 같다면 다차원으로 자유로이 변형가능]
>>>test.reshape(-1, 1)  # -1: size를 기반으로 row 개수 선정
array([[1],
       [2],
       [3],
       [4],
       [1],
       [2],
       [5],
       [8]])


flatten
- 다차원 array를 1차원 array로 변환

>>>test_matrix = [[[1,2,3,4], [1,2,5,8]], [[1,2,3,4], [1,2,5,8]]]
>>>np.array(test_matrix).flatten()
array([1, 2, 3, 4, 1, 2, 5, 8, 1, 2, 3, 4, 1, 2, 5, 8])

indexing
- List와 달리 이차원 배열에서 [0,0] 과 같은 표기법을 제공함
- Matrix 일경우 앞은 row 뒤는 column을 의미함
>>>import numpy as np
>>>test_exmaple = np.array([[1, 2, 3], [4.5, 5, 6]], int)
>>>test_exmaple
array([[1, 2, 3],
       [4, 5, 6]])
>>>test_exmaple[0][0]
1
>>>test_exmaple[0,0]
1
>>>test_exmaple[0,0] = 10 # Matrix 0,0 에 12 할당
>>>test_exmaple
array([[10,  2,  3],
       [ 4,  5,  6]])

slicing
- List와 달리 행과 열 부분을 나눠서 slicing이 가능함
- Matrix의 부분 집합을 추출할 때 유용함
>>>a = np.array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]], int)
>>>a[:,2:] # 전체 Row의 2열 이상
>>>a[1,1:3] # 1 Row의 1열 ~ 2열
>>>a[1:3] # 1 Row ~ 2Row의 전체

>>>test_exmaple = np.array([
    [1, 2, 5, 8], [1, 2, 5, 8],[1, 2, 5, 8],[1, 2, 5, 8]], int)
>>>test_exmaple[:2,:]
array([[1, 2, 5, 8],
       [1, 2, 5, 8]])
>>>test_exmaple[:,1:3]
array([[2, 5],
       [2, 5],
       [2, 5],
       [2, 5]])

>>>test_exmaple[1,:2]
array([1, 2])

>>>test_exmaple = np.array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]], int)
>>>test_exmaple[:,2:] # 전체 Row의 2열 이상
array([[ 3,  4,  5],
       [ 8,  9, 10]])
>>>test_exmaple[1,1:3] # 1 Row의 1열 ~ 2열
array([7, 8])

>>>test_exmaple[1:3] # 1 Row ~ 2Row의 전체
array([[4, 5, 6]])

>>>a = np.arange(100).reshape(10,10)
>>>a[:, -1].reshape(-1,1)
array([[ 9],
       [19],
       [29],
       [39],
       [49],
       [59],
       [69],
       [79],
       [89],
       [99]])

arange
- array의 범위를 지정하여, 값의 list를 생성하는 명령어

>>>import numpy as np
>>>np.arange(30)
array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])

>>>np.arange(0,5,0.5)
array([0. , 0.5, 1. , 1.5, 2. , 2.5, 3. , 3.5, 4. , 4.5])
>>>np.arange(30).reshape(-1,5)
array([[ 0,  1,  2,  3,  4],
       [ 5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14],
       [15, 16, 17, 18, 19],
       [20, 21, 22, 23, 24],
       [25, 26, 27, 28, 29]])
>>> np.arange(30).reshape(5,6)
array([[ 0,  1,  2,  3,  4,  5],
       [ 6,  7,  8,  9, 10, 11],
       [12, 13, 14, 15, 16, 17],
       [18, 19, 20, 21, 22, 23],
       [24, 25, 26, 27, 28, 29]])

[ones, zeros and empty]
- zeros – 0으로 가득찬 ndarray 생성
- np.zeros(shape, dtype, order)

>>> np.zeros(shape=(10,), dtype=np.int8)
array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=int8)
>>> np.zeros((2,5))
array([[0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.]])

- ones – 1로 가득찬 ndarrary 생성
- np.ones(shape, dtype, order)
>>> np.ones(shape=(10,), dtype=np.int8)
array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1], dtype=int8)
>>> np.ones((2,5))
array([[1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1.]])

[something_like]
- 기존 ndarray의 shape 크기 만큼 1, 0 또는 empty array를 반환
>>> test_matrix=np.arange(30).reshape(5,6)
>>> np.ones_like(test_matrix)
array([[1, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 1]])
>>>
[identity]
- 단위 행렬(i 행렬)을 생성함
- n -> number of rows
>>> np.identity(n=3, dtype=np.int8)
array([[1, 0, 0],
       [0, 1, 0],
       [0, 0, 1]], dtype=int8)

>>> np.identity(5)
array([[1., 0., 0., 0., 0.],
       [0., 1., 0., 0., 0.],
       [0., 0., 1., 0., 0.],
       [0., 0., 0., 1., 0.],
       [0., 0., 0., 0., 1.]])

[ eye ]
- 대각선이 1인 행렬, k값의 시작 index의 변경이 가능
 >>> np.eye(N=3,M=5, dtype=np.int8)
array([[1, 0, 0, 0, 0],
       [0, 1, 0, 0, 0],
       [0, 0, 1, 0, 0]], dtype=int8)

>>> np.eye(3)
array([[1., 0., 0.],
       [0., 1., 0.],
       [0., 0., 1.]])

>>> np.eye(3,5,k=2)  # k -> start index
array([[0., 0., 1., 0., 0.],
       [0., 0., 0., 1., 0.],
       [0., 0., 0., 0., 1.]])

[diag]
- 대각 행렬의 값을 추출함
>>> matrix=np.arange(9).reshape(3,3)
>>> np.diag(matrix)
array([0, 4, 8])

>>> np.diag(matrix, k=1)
array([1, 5])

[sum]
- ndarray의 element들 간의 합을 구함, list의 sum 기능과 동일
>>> test_array=np.arange(1,11)
>>> test_array
array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10])
>>> test_array.sum(dtype=np.float)
55.0

[axis]
- 모든 operation function을 실행할 때, 기준이 되는 dimension 축
>>> test_array.sum(axis=1) # axis=1 →
array([10, 26, 42])

>>> test_array.sum(axis=0) # axis=0↓
array([15, 18, 21, 24])
>>>

[concatenate]
- Numpy array를 합치는 함수
>>> a=np.array([1,2,3])
>>> b=np.array([2,3,4])
>>> np.vstack((a,b))
array([[1, 2, 3],
       [2, 3, 4]])
>>> a=np.array([[1],[2],[3]])
>>> b=np.array([[2],[3],[4]])
>>> np.hstack((a,b))
array([[1, 2],
       [2, 3],
       [3, 4]])

>>> a=np.array([[1,2,3]])
>>> b=np.array([[2,3,4]])
>>> np.concatenate((a,b), axis=0)
array([[1, 2, 3],
       [2, 3, 4]])

>>> a=np.array([[1,2],[3,4]])
>>> b=np.array([[5,6]])
>>> np.concatenate((a,b.T), axis=1)
array([[1, 2, 5],
       [3, 4, 6]])

[Operations b/t arrays]
- Numpy는 array간의 기본적인 사칙 연산을 지원함
>>> test_a=np.array([[1,2,3],[4,5,6]], float)
>>> test_a+test_a
array([[ 2.,  4.,  6.],
       [ 8., 10., 12.]])

>>> test_a-test_a
array([[0., 0., 0.],
       [0., 0., 0.]])

>>> test_a*test_a
array([[ 1.,  4.,  9.],
       [16., 25., 36.]])
>>>

[Element-wise operations]
- Array간 shape이 같을 때 일어나는 연산

>>> import numpy as np
>>> matrix_a=np.arange(1,13).reshape(3,4)
>>> matrix_a
array([[ 1,  2,  3,  4],
       [ 5,  6,  7,  8],
       [ 9, 10, 11, 12]])
>>> matrix_a*matrix_a
array([[  1,   4,   9,  16],
       [ 25,  36,  49,  64],
       [ 81, 100, 121, 144]])
>>>

[Dot product]
- Matrix의 기본 연산
- dot 함수 사용

>>> test_a=np.arange(1,7).reshape(2,3)
>>> test_b=np.arange(7,13).reshape(3,2)
>>> test_a.dot(test_b)
array([[ 58,  64],
       [139, 154]])
>>>

[transpose]
- transpose 또는 T attribute 사용

>>> test_a=np.arange(1,7).reshape(2,3)
>>> test_a
array([[1, 2, 3],
       [4, 5, 6]])


>>> test_a.transpose()
array([[1, 4],
       [2, 5],
       [3, 6]])
>>> test_a.T.dot(test_a)
array([[17, 22, 27],
       [22, 29, 36],
       [27, 36, 45]])
>>> test_a.T
array([[1, 4],
       [2, 5],
       [3, 6]])
>>>

[broadcasting]
- Shape이 다른 배열 간 연산을 지원하는 기능
>>> test_matrix=np.array([[1,2,3],[4,5,6]], float)
>>> scalar=3
>>> test_matrix+scalar
array([[4., 5., 6.],
       [7., 8., 9.]])
>>>

>>> test_matrix=np.array([[1,2,3],[4,5,6]], float)
>>> scalar=3
>>> test_matrix+scalar
array([[4., 5., 6.],
       [7., 8., 9.]])
>>> test_matrix-scalar
array([[-2., -1.,  0.],
       [ 1.,  2.,  3.]])
>>> test_matrix*scalar
array([[ 3.,  6.,  9.],
       [12., 15., 18.]])

>>> test_matrix*5
array([[ 5., 10., 15.],
       [20., 25., 30.]])
>>> test_matrix/5
array([[0.2, 0.4, 0.6],
       [0.8, 1. , 1.2]])
>>> test_matrix**2
array([[ 1.,  4.,  9.],
       [16., 25., 36.]])
>>> test_matrix=np.arange(1,13).reshape(4,3)
>>> test_vector=np.arange(10,40,10)
>>> test_matrix+test_vector
array([[11, 22, 33],
       [14, 25, 36],
       [17, 28, 39],
       [20, 31, 42]])
>>>

[All & Any]
- Array의 데이터 전부(and) 또는 일부(or)가 조건에 만족 여부 반환
>>> a=np.arange(10)
>>> a>5
array([False, False, False, False, False, False,  True,  True,  True,
        True])
>>>

>>> np.any(a>5), np.any(a<0) # any -> 하나라도 조건에 만족한다면 true
(True, False)
>>>

>>> np.all(a>5), np.all(a<10) # all -> 모두가 조건에 만족한다면 true
(False, True)
>>>

[Comparison operation]
#1 - Numpy는 배열의 크기가 동일 할 때 element간 비교의 결과를 Boolean type으로 반환하여 돌려줌
>>> test_a=np.array([1,3,0], float)
>>> test_b=np.array([5,2,1], float)
>>> test_a>test_b
array([False,  True, False])
>>> test_a==test_b
array([False, False, False])
>>> (test_a>test_b).any()  # any -> 하나라도 true라면 true
True
>>>

[Comparison operation #2]
>>> a=np.array([1,3,0], float)
>>> np.logical_and(a>0, a<3)
array([ True, False, False])
>>> np.logical_and(a>0, a<3)
array([ True, False, False])

>>> a=np.array([1,3,0], float)
>>> np.logical_and(a>0, a<3)
array([ True, False, False])

>>> b=np.array([True, False, True], bool)
>>> np.logical_not(b)
array([False,  True, False])

>>> c=np.array([False, True, False],bool)
>>> np.logical_or(b,c)
array([ True,  True,  True])
>>>




[np.where]
>>> np.where(a>0, 3,2) # where(조건, 조건이 참일 때, 조건이 거짓일 때)
array([3, 3, 2])

>>> a=np.arange(10)
>>> np.where(a>5) # index값 반환
(array([6, 7, 8, 9], dtype=int64),)
>>>
>>> a=np.array([1, np.NaN, np.Inf], float)
>>> np.isnan(a) # Not a Number
array([False,  True, False])

>>> np.isfinite(a) # is finite number
array([ True, False, False])
>>>

[argmax & argmin]
 - array내 최대값 또는 최소값의 index를 반환함

>>> a=np.array([1,2,4,5,8,78,23,3])
>>> np.argmax(a), np.argmin(a)
(5, 0)
>>>
- axis 기반의 반환
>>> a=np.array([[1,2,4,7],[9,88,6,45],[9,76,3,4]])
>>> np.argmax(a, axis=1), np.argmin(a, axis=0)
(array([3, 1, 1], dtype=int64), array([0, 0, 2, 2], dtype=int64))
>>>
>>> a=np.array([[1,2,4,7],[9,88,6,45],[9,76,3,4]])
>>> np.argmax(a, axis=1), np.argmin(a, axis=0)
(array([3, 1, 1], dtype=int64), array([0, 0, 2, 2], dtype=int64))
>>>

[boolean index]
- numpy는 배열은 특정 조건에 따른 값을 배열 형태로 추출 할 수 있음
- Comparison operation 함수들도 모두 사용가능
>>> test_array=np.array([1,4,0,2,3,8,9,7],float)
>>> test_array>3
array([False,  True, False, False, False,  True,  True,  True])

>>> test_array[test_array>3] # 조건이 True인 index의 element만 추출
array([4., 8., 9., 7.])

>>> condition=test_array<3
>>> test_array[condition]
array([1., 0., 2.])
>>>

[boolean index]
>>> A=np.array([[12,13,14,12],
	   [14,11,10,9],
	   [10,15,12,13]])
>>> B=A<15
>>> B.astype(np.int)
array([[1, 1, 1, 1],
       [1, 1, 1, 1],
       [1, 0, 1, 1]])
>>>

[fancy index]
- numpy는 array를 index value로 사용해서 값을 추출하는 방법
>>> a=np.array([2,4,6,8], float)
>>> b=np.array([0,0,1,3,2,1], int)
>>> a[b]  #bracket index, b배열의 값을 index로 하여 a의 값들을 추출함
array([2., 2., 4., 8., 6., 4.])

>>> a.take(b) #take함수 : bracket index와 같은 효과
array([2., 2., 4., 8., 6., 4.])
>>>

- Matrix 형태의 데이터도 가능

>>> a=np.array([[1,4],[9,16]], float)
>>> b=np.array([0,0,1,1,0], int)
>>> c=np.array([0,1,1,1,1], int)
>>> a[b,c] # b를 row index, c를 column index로 변환하여 표시함
array([ 1.,  4., 16., 16.,  4.])
>>>

[pandas]
구조화된데이터의처리를지원하는Python 라이브러리 Python계의엑셀!
-구조화된데이터의처리를지원하는Python 라이브러리
-고성능Array 계산라이브러리인Numpy와통합하여, 강력한“스프레드시트” 처리기능을제공
-인덱싱, 연산용함수, 전처리함수등을제공함

[데이터로딩]
>>> import pandas as pd
# Data URL
>>> data_url='https://archive.ics.uci.edu/ml/machine-learning-databases/housing/housing.data'
# csv타입 데이터 로드, separate는 빈공간으로 지정하고, column은 없음
>>> df_data=pd.read_csv(data_url, sep='\s+',header=None)
>>> df_data.head()  # 처음 다섯줄 출력
        0     1     2   3      4   ...      9     10      11    12    13
0  0.00632  18.0  2.31   0  0.538  ...   296.0  15.3  396.90  4.98  24.0
1  0.02731   0.0  7.07   0  0.469  ...   242.0  17.8  396.90  9.14  21.6
2  0.02729   0.0  7.07   0  0.469  ...   242.0  17.8  392.83  4.03  34.7
3  0.03237   0.0  2.18   0  0.458  ...   222.0  18.7  394.63  2.94  33.4
4  0.06905   0.0  2.18   0  0.458  ...   222.0  18.7  396.90  5.33  36.2

[5 rows x 14 columns]

>>> df['account'].head(3)
0    211829
1    320563
2    648336
Name: account, dtype: int64
>>> df[['account','street','state']].head(3)
   account                                street          state
0   211829                    34456 Sean Highway          Texas
1   320563                     1311 Alvis Tunnel  NorthCarolina
2   648336  62184 Schamberger Underpass Apt. 231           Iowa

>>> df['account'][:3]
0    211829
1    320563
2    648336
Name: account, dtype: int64

>>> account_serires=df['account']
>>> account_serires[:3]

>>> account_serires[[0,1,2]]
0    211829
1    320563
2    648336

>>> account_serires[account_serires<25000]
Series([], Name: account, dtype: int64)
>>> account_serires
0    211829
1    320563
2    648336
3    109996
4    121213

>>>

>>> df.index=df['account']
>>> del df['account']
>>> df.head()
                                name  ...      Mar
account                               ...
211829    Kerluke, Koepp and Hilpert  ...    35000
320563                Walter-Trantow  ...    35000
648336    Bashirian, Kunde and Price  ...    35000
109996   D'Amore, Gleichner and Bode  ...    10000
121213                 Bauch-Goldner  ...    35000

[5 rows x 8 columns]

>>> df[['name','street']][:2]
                               name              street
account
211829   Kerluke, Koepp and Hilpert  34456 Sean Highway
320563               Walter-Trantow   1311 Alvis Tunnel

>>> df.loc[[211829, 320563],['name','street']]
                               name              street
account
211829   Kerluke, Koepp and Hilpert  34456 Sean Highway
320563               Walter-Trantow   1311 Alvis Tunnel
>>>

>>> df.index=list(range(0,5))
>>> df.head()
                          name  ...      Mar
0   Kerluke, Koepp and Hilpert  ...    35000
1               Walter-Trantow  ...    35000
2   Bashirian, Kunde and Price  ...    35000
3  D'Amore, Gleichner and Bode  ...    10000
4                Bauch-Goldner  ...    35000

[5 rows x 8 columns]
>>>

>>>df.iloc[:2, :2]
                               name              street
account
211829   Kerluke, Koepp and Hilpert  34456 Sean Highway
320563               Walter-Trantow   1311 Alvis Tunnel
