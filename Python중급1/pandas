[pandas]
구조화된데이터의처리를지원하는Python 라이브러리 Python계의엑셀!
-구조화된데이터의처리를지원하는Python 라이브러리
-고성능Array 계산라이브러리인Numpy와통합하여, 강력한“스프레드시트” 처리기능을제공
-인덱싱, 연산용함수, 전처리함수등을제공함

[데이터로딩]
>>> import pandas as pd
# Data URL
>>> data_url='https://archive.ics.uci.edu/ml/machine-learning-databases/housing/housing.data'
# csv타입 데이터 로드, separate는 빈공간으로 지정하고, column은 없음
>>> df_data=pd.read_csv(data_url, sep='\s+',header=None)
>>> df_data.head()  # 처음 다섯줄 출력
        0     1     2   3      4   ...      9     10      11    12    13
0  0.00632  18.0  2.31   0  0.538  ...   296.0  15.3  396.90  4.98  24.0
1  0.02731   0.0  7.07   0  0.469  ...   242.0  17.8  396.90  9.14  21.6
2  0.02729   0.0  7.07   0  0.469  ...   242.0  17.8  392.83  4.03  34.7
3  0.03237   0.0  2.18   0  0.458  ...   222.0  18.7  394.63  2.94  33.4
4  0.06905   0.0  2.18   0  0.458  ...   222.0  18.7  396.90  5.33  36.2

[5 rows x 14 columns]
>>>

[Pandas의 구성]
Series
 - DataFrame 중 하나의 Column에 해당하는 데이터의 모음 Object
DataFrame
 - Data Table 전체를 포함하는Object

>>> from pandas import Series,DataFrame
>>> import pandas as pd
>>> list_data=[1,2,3,4,5]
>>> example_obj=Series(data=list_data)
>>> example_obj
0    1
1    2
2    3
3    4
4    5
dtype: int64


>>> list_name=['a','b','c','d','e']
>>> example_obj=Series(data=list_data,index=list_name)
>>> example_obj
a    1
b    2
c    3
d    4
e    5
dtype: int64
>>>

>>> import numpy as np
>>> dict_data={'a':1,'b':2,'c':3,'d':4,'e':5}
>>> example_obj=Series(dict_data, dtype=np.float32, name='example_data')
>>> example_obj
a    1.0
b    2.0
c    3.0
d    4.0
e    5.0
Name: example_data, dtype: float32
>>>
>>> example_obj['a']  #data index에접근하기
1.0
>>> example_obj['a']=3.2 #data index에값할당하기
>>> example_obj
a    3.2
b    2.0
c    3.0
d    4.0
e    5.0
Name: example_data, dtype: float32
>>>

>>> example_obj.values
array([3.2, 2. , 3. , 4. , 5. ], dtype=float32)
>>> example_obj.index
Index(['a', 'b', 'c', 'd', 'e'], dtype='object')

>>> example_obj.name='number'
>>> example_obj.index.name="alphabet"
>>> example_obj

alphabet
a    3.2
b    2.0
c    3.0
d    4.0
e    5.0
Name: number, dtype: float32
>>>

[Dataframe Overview]
>>>raw_data={'first_name':['Jason','Molly','Tina','Jake','Amy'],
'last_name':['Miller','Jacobson','Ali','Milner','Cooze'],
'age' :[42,52,36,24,73],'city':['San Francisco','Baltimore','Miami','Douglas','Bostone']}
>>> df=pd.DataFrame(raw_data,columns=['first_name','last_name','age','city'])
>>> df
  first_name last_name  age           city
0      Jason    Miller   42  San Francisco
1      Molly  Jacobson   52      Baltimore
2       Tina       Ali   36          Miami
3       Jake    Milner   24        Douglas
4       Amy     Cooze   73        Bostone
>>>

>>> DataFrame(raw_data, columns=['age','city'])  #column 선택
   age           city
0   42  San Francisco
1   52      Baltimore
2   36          Miami
3   24        Douglas
4   73        Bostone
>>>
>>> df=DataFrame(raw_data, columns=['first_name','last_name','age','city','debt'])
  first_name last_name  age           city debt
0      Jason    Miller   42  San Francisco  NaN
1      Molly  Jacobson   52      Baltimore  NaN
2       Tina       Ali   36          Miami  NaN
3       Jake    Milner   24        Douglas  NaN
4        Amy     Cooze   73        Bostone  NaN
>>>


>>> df.first_name   #column 선택 – series 추출
0    Jason
1    Molly
2     Tina
3     Jake
4      Amy
Name: first_name, dtype: object

>>> df['first_name'] #column 선택 – series 추출
0    Jason
1    Molly
2     Tina
3     Jake
4      Amy
Name: first_name, dtype: object
>>>

>>> df.loc[1]
first_name        Molly
last_name      Jacobson
age                  52
city          Baltimore
Name: 1, dtype: object
>>>

>>> df['age'].iloc[1:]
1    52
2    36
3    24
4    73
Name: age, dtype: int64
>>>

>>> s=pd.Series(np.nan, index=[49,48,47,46,45,1,2,3,4,5])
>>> s
49   NaN
48   NaN
47   NaN
46   NaN
45   NaN
1    NaN
2    NaN
3    NaN
4    NaN
5    NaN
dtype: float64

>>> s.loc[:3]  #loc은 index 이름
49   NaN
48   NaN
47   NaN
46   NaN
45   NaN
1    NaN
2    NaN
3    NaN
dtype: float64

>>> s.iloc[:3] #iloc은 index number
49   NaN
48   NaN
47   NaN
dtype: float64
>>>

>>> df=DataFrame(raw_data, columns=['first_name','last_name','age','city','debt'])
>>> df.debt = df.age > 40
>>> df
  first_name last_name  age           city   debt
0      Jason    Miller   42  San Francisco   True
1      Molly  Jacobson   52      Baltimore   True
2       Tina       Ali   36          Miami  False
3       Jake    Milner   24        Douglas  False
4        Amy     Cooze   73        Bostone   True
>>>

>>> df.T
                        0          1      2        3        4
first_name          Jason      Molly   Tina     Jake      Amy
last_name          Miller   Jacobson    Ali   Milner    Cooze
age                    42         52     36       24       73
city        San Francisco  Baltimore  Miami  Douglas  Bostone
debt                 True       True  False    False     True
>>> df.values
array([['Jason', 'Miller', 42, 'San Francisco', True],
       ['Molly', 'Jacobson', 52, 'Baltimore', True],
       ['Tina', 'Ali', 36, 'Miami', False],
       ['Jake', 'Milner', 24, 'Douglas', False],
       ['Amy', 'Cooze', 73, 'Bostone', True]], dtype=object)
>>> df.to_csv()
',first_name,last_name,age,city,debt\n0,Jason,Miller,42,San Francisco,True\n1,Molly,Jacobson,52,Baltimore,True\n2,Tina,Ali,36,Miami,False\n3,Jake,Milner,24,Douglas,False\n4,Amy,Cooze,73,Bostone,True\n'
>>>

>>> del df['debt']
>>> df
  first_name last_name  age           city
0      Jason    Miller   42  San Francisco
1      Molly  Jacobson   52      Baltimore
2       Tina       Ali   36          Miami
3       Jake    Milner   24        Douglas
4        Amy     Cooze   73        Bostone
>>>

>>> pop={'Nevada' :{2001:2.4, 2002:2.9},'Ohio':{2000:1.5,2001:1.7, 2002:3.6}}
>>> DataFrame(pop)
      Nevada  Ohio
2000     NaN   1.5
2001     2.4   1.7
2002     2.9   3.6

>>> import xlrd  # xlrd module 설치
>>> df = pd.read_excel("C://data.xlsx")
>>>
>>> df.head()
   account                         name  ...       Feb    Mar
0   211829   Kerluke, Koepp and Hilpert  ...     62000  35000
1   320563               Walter-Trantow  ...     45000  35000
2   648336   Bashirian, Kunde and Price  ...    120000  35000
3   109996  D'Amore, Gleichner and Bode  ...    120000  10000
4   121213                Bauch-Goldner  ...    120000  35000

[5 rows x 9 columns]

[Selection	&	Drop]
- Selection with column names

>>> df['account'].head(3) #한개의 column 선택시
0    211829
1    320563
2    648336
Name: account, dtype: int64

>>> df[['account','street','state']].head(3) #1개 이상의 column 선택
   account                                street          state
0   211829                    34456 Sean Highway          Texas
1   320563                     1311 Alvis Tunnel  NorthCarolina
2   648336  62184 Schamberger Underpass Apt. 231           Iowa

- Selection with index number

>>> df[:3]  #column 이름 없이 사용하는 index number는 row 기준 표시
   account                        name  ...       Feb    Mar
0   211829  Kerluke, Koepp and Hilpert  ...     62000  35000
1   320563              Walter-Trantow  ...     45000  35000
2   648336  Bashirian, Kunde and Price  ...    120000  35000

[3 rows x 9 columns]

>>> df['account'][:3] #column이름과 함께 row index 사용시, 해당 column만
0    211829
1    320563
2    648336
Name: account, dtype: int64

- Series selection

>>> account_serires=df['account']
>>> account_serires[:3]
0    211829
1    320563
2    648336
Name: account, dtype: int64

>>> account_serires[[0,1,2]] #1개 이상의 index
0    211829
1    320563
2    648336
Name: account, dtype: int64

>>> account_serires[account_serires<250000] #Boolean index
0    211829
3    109996
4    121213
Name: account, dtype: int64
>>>

- Index 변경
>>> df.index=df['account']
>>> df
         account                         name  ...       Feb    Mar
account                                        ...
211829    211829   Kerluke, Koepp and Hilpert  ...     62000  35000
320563    320563               Walter-Trantow  ...     45000  35000
648336    648336   Bashirian, Kunde and Price  ...    120000  35000
109996    109996  D'Amore, Gleichner and Bode  ...    120000  10000
121213    121213                Bauch-Goldner  ...    120000  35000

[5 rows x 9 columns]

>>> del df['account']
>>> df
                                name  ...      Mar
account                               ...
211829    Kerluke, Koepp and Hilpert  ...    35000
320563                Walter-Trantow  ...    35000
648336    Bashirian, Kunde and Price  ...    35000
109996   D'Amore, Gleichner and Bode  ...    10000
121213                 Bauch-Goldner  ...    35000

[5 rows x 8 columns]

- Basic, loc, ilocselection

>>> df[['name','street']][:2] #Column 과 index number
                               name              street
account
211829   Kerluke, Koepp and Hilpert  34456 Sean Highway
320563               Walter-Trantow   1311 Alvis Tunnel
>>>

>>> df.loc[[211829, 320563],['name','street']] #Column 과 index name
                               name              street
account
211829   Kerluke, Koepp and Hilpert  34456 Sean Highway
320563               Walter-Trantow   1311 Alvis Tunnel
>>>

>>> df.iloc[:2, :2]  #Column number와 index number
                               name              street
account
211829   Kerluke, Koepp and Hilpert  34456 Sean Highway
320563               Walter-Trantow   1311 Alvis Tunnel

- index 재설정

>>> df.index=list(range(0,5))
>>> df
                          name  ...      Mar
0   Kerluke, Koepp and Hilpert  ...    35000
1               Walter-Trantow  ...    35000
2   Bashirian, Kunde and Price  ...    35000
3  D'Amore, Gleichner and Bode  ...    10000
4                Bauch-Goldner  ...    35000

[5 rows x 8 columns]
>>>

- Data drop

>>> df.drop(1) #Index number로 drop
                          name  ...      Mar
0   Kerluke, Koepp and Hilpert  ...    35000
2   Bashirian, Kunde and Price  ...    35000
3  D'Amore, Gleichner and Bode  ...    10000
4                Bauch-Goldner  ...    35000

[4 rows x 8 columns]
>>>

>>> df.drop([0,1,2]) #한개 이상의 Index number로 drop
                          name  ...      Mar
3  D'Amore, Gleichner and Bode  ...    10000
4                Bauch-Goldner  ...    35000

[2 rows x 8 columns]
>>>

>>> df.drop([0,1,2], inplace=True)
>>> df
                          name  ...      Mar
3  D'Amore, Gleichner and Bode  ...    10000
4                Bauch-Goldner  ...    35000

[2 rows x 8 columns]

>>> df.drop('name', axis=1) #axis 지정으로 축을 기준으로 drop -> column 중에 “name”
                        street             city  ...       Feb    Mar
3  155 Fadel Crescent Apt. 144       Hyattburgh  ...    120000  10000
4          7274 Marissa Common  Shanahanchester  ...    120000  35000

[2 rows x 7 columns]
>>>

>>> df
                          name  ...      Mar
3  D'Amore, Gleichner and Bode  ...    10000
4                Bauch-Goldner  ...    35000

[2 rows x 8 columns]
>>>

>>> df.drop('name', inplace=True, axis=1)

[ Dataframe Operations ]

- Series operation

>>> s1=Series(range(1,6), index=list('abced'))
>>> s1
a    1
b    2
c    3
e    4
d    5
dtype: int64
>>>

>>> s2=Series(range(5,11), index=list('bcedef'))
>>> s2
b     5
c     6
e     7
d     8
e     9
f    10
dtype: int64
>>>

>>> s1.add(s2)
a     NaN
b     7.0
c     9.0
d    13.0
e    11.0
e    13.0
f     NaN
dtype: float64
>>>

>>> s1+s2 #index 으로 기준으로 연산수행 겹치는 index가 없을 경우 NaN값으로 반환
a     NaN
b     7.0
c     9.0
d    13.0
e    11.0
e    13.0
f     NaN
dtype: float64
>>>

- Dataframe operation

>>> df1=DataFrame(np.arange(9).reshape(3,3), columns=list('abc'))
>>> df1
   a  b  c
0  0  1  2
1  3  4  5
2  6  7  8
>>>

>>> df2=DataFrame(np.arange(16).reshape(4,4), columns=list('abcd'))
>>> df2
    a   b   c   d
0   0   1   2   3
1   4   5   6   7
2   8   9  10  11
3  12  13  14  15
>>>

>>> df1+df2
      a     b     c   d
0   0.0   2.0   4.0 NaN
1   7.0   9.0  11.0 NaN
2  14.0  16.0  18.0 NaN
3   NaN   NaN   NaN NaN
>>>

- Operation types: add, sub, div, mul

>>> df1.add(df2, fill_value=0) #df는 column과 index를 모두 고려 add operation을 쓰면 NaN값 0으로 변환
      a     b     c     d
0   0.0   2.0   4.0   3.0
1   7.0   9.0  11.0   7.0
2  14.0  16.0  18.0  11.0
3  12.0  13.0  14.0  15.0
>>>

- Series + Dataframe

>>> df=DataFrame(np.arange(16).reshape(4,4), columns=list('abcd'))
>>> df
    a   b   c   d
0   0   1   2   3
1   4   5   6   7
2   8   9  10  11
3  12  13  14  15

>>> s =Series(np.arange(10,14), index=list('abcd'))
>>> s
a    10
b    11
c    12
d    13
dtype: int32
>>>

>>> df + s #column을 기준으로 broadcasting이 발생함
    a   b   c   d
0  10  12  14  16
1  14  16  18  20
2  18  20  22  24
3  22  24  26  28
>>>

>>> df=DataFrame(np.arange(16).reshape(4,4), columns=list('abcd'))
>>> df
    a   b   c   d
0   0   1   2   3
1   4   5   6   7
2   8   9  10  11
3  12  13  14  15
>>> s2 =Series(np.arange(10,14))
>>> s2
0    10
1    11
2    12
3    13
dtype: int32

>>> df+s2
    a   b   c   d   0   1   2   3
0 NaN NaN NaN NaN NaN NaN NaN NaN
1 NaN NaN NaN NaN NaN NaN NaN NaN
2 NaN NaN NaN NaN NaN NaN NaN NaN
3 NaN NaN NaN NaN NaN NaN NaN NaN
>>>

>>> df.add(s2, axis=0)  #axis를 기준으로 row broadcasting 실행
    a   b   c   d
0  10  11  12  13
1  15  16  17  18
2  20  21  22  23
3  25  26  27  28
>>>

[lambda, map, apply]

Lambda 함수 - 한 줄로 함수를 표현하는 익명 함수 기법
- Lisp 언어에서 시작된 기법으로 오늘날 현대언어에 많이 사용
  lambda argument : expression

map 함수
- 함수와 sequence형 데이터를 인자로 받아
- 각 element마다 입력받은 함수를 적용하여 list로 반환
- 일반적으로 함수를 lambda형태로 표현함
  map(function, sequence)

map for series
- Pandas의 series type의 데이터에도 map 함수 사용가능
- function 대신 dict, sequence형 자료등으로 대체 가능

>>> s1=Series(np.arange(10))
>>> s1.head(5)
0    0
1    1
2    2
3    3
4    4
dtype: int32

>>> s1.map(lambda x:x**2).head(5)
0     0
1     1
2     4
3     9
4    16
dtype: int64
>>>

>>> z={1:'A', 2:'B', 3:'C'}
>>> s1.map(z).head(5) #dict type으로 데이터 교체 없는 값은 NaN

0    NaN
1      A
2      B
3      C
4    NaN
dtype: object
>>>

>>> s2=Series(np.arange(10,20))
>>> s2.head(5)
0    10
1    11
2    12
3    13
4    14
dtype: int32
>>>

- Example - map for series

>>> url='https://raw.githubusercontent.com/rstudio/Intro/master/data/wages.csv'
>>> df = pd.read_csv(url)
>>> df.head()
           earn  height     sex   race  ed  age
0  79571.299011   73.89    male  white  16   49
1  96396.988643   66.23  female  white  16   62
2  48710.666947   63.77  female  white  16   33
3  80478.096153   63.22  female  other  16   95
4  82089.345498   63.08  female  white  17   43

>>> df.sex.unique()
array(['male', 'female'], dtype=object)
>>> df["sex_code"] =  df.sex.map({"male":0, "female":1}) #성별 str -> 성별 code
>>> df.head(5)
           earn  height     sex   race  ed  age  sex_code
0  79571.299011   73.89    male  white  16   49         0
1  96396.988643   66.23  female  white  16   62         1
2  48710.666947   63.77  female  white  16   33         1
3  80478.096153   63.22  female  other  16   95         1
4  82089.345498   63.08  female  white  17   43         1
>>>